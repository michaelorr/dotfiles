#!/usr/bin/env bash

set -euo pipefail

###
# Modify the following variables to customize the installation
###
export OS=crostini  # `darwin` or `crostini`
export DOT=/usr/local/dot
export SRC=/usr/local/src
export TOOLS=/usr/local/etc
export DEFAULT_EMAIL="michael@orr.co"
export TMUX_ENABLED=false
export DOCKER_COMPOSE_VERSION="1.25.5"
export GOPATH=$SRC/go
export GO_INSTALL_PATH=/usr/local
###

export PATH+=":${GO_INSTALL_PATH}/go/bin"
export TPL_HEADER="###
# The following file was autogenerated from a template. Do not modify it directly.
###"

function start {
    echo ">>> $1"
}

function finished {
    echo "::: Done"
}

if [[ -d $DOT/colors/falcon ]]; then
    start "Updating falcon colors"
    git -C $DOT/colors/falcon pull
    finished
else
    start "Installing falcon colors"
    git clone https://github.com/fenetikm/falcon $DOT/colors/falcon
    finished
fi

if [[ -d $DOT/git/gitstatus ]]; then
    start "Updating gitstatus"
    git -C $DOT/git/gitstatus pull
    finished
else
    start "Installing gitstatus"
    git clone https://github.com/romkatv/gitstatus $DOT/git/gitstatus
    finished
fi

if [[ $OS == "darwin" ]]; then
    brew update || true
    brew upgrade
    # brew install vim tmux jq fzf exa
    ln_args="-hfs"

    export CREDENTIAL="[credential]
    helper = osxkeychain"
elif [[ $OS == "crostini" ]]; then
    ln_args="-fns"
    export CREDENTIAL="[credential]
    helper = store"

    start "Installing and updating system packages"
    sudo apt-get update && sudo apt-get -y upgrade
    sudo apt install -y kitty silversearcher-ag zsh zsh-autosuggestions zsh-syntax-highlighting build-essential gettext-base jq tree docker.io exa fzf
    finished

    start "Setting shell"
    sudo usermod -s "$(which zsh)" "${USER}"
    finished

    start "Generating/linking kitty.conf"
    envsubst '${DOT} ${TPL_HEADER}' < "${DOT}/etc/kitty.conf.tpl" > "${DOT}/etc/kitty.conf"
    mkdir -p ${XDG_CONFIG_HOME:=${HOME}/.config}/kitty
    ln $ln_args "${DOT}/etc/kitty.conf" ${XDG_CONFIG_HOME}/kitty/kitty.conf
    finished

    sudo usermod -aG docker ${USER}
    sudo chmod 666 /var/run/docker.sock
    # http://joe.blog.freemansoft.com/2020/03/docker-on-chromebook-on-crostini.html
    # http://penguin.linux.test:<port_address>/<url>

    command -v docker-compose >/dev/null 2>&1 || {
        start "Install Docker compose"
        sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        finished
    }

    fc-list | grep Fira > /dev/null 2>&1 || {
        start "Installing fonts"
        tmp_dir=$(mktemp -d -t fonts-XXXXX)
        git clone --depth=1 https://github.com/ryanoasis/nerd-fonts $tmp_dir/nerd-fonts
        $tmp_dir/nerd-fonts/install.sh FiraCode
        rm -rf "$tmp_dir"
        finished
    }
fi

if [[ ! -d ${GO_INSTALL_PATH}/go ]]; then
    version=$(curl https://golang.org/VERSION?m=text)
    start "Installing golang version: ${version}"
    # install go if not found on path
    tmp_dir=$(mktemp -d -t golang-XXXXX)
    wget "https://golang.org/dl/${version}.linux-amd64.tar.gz" -P $tmp_dir
    tar -xzf ${tmp_dir}/go1.*.tar.gz -C ${GO_INSTALL_PATH}
    rm -rf "$tmp_dir"
    finished
fi

start "Installing lazydocker and lazygit"
GO111MODULE=off go get -u github.com/jesseduffield/lazydocker
GO111MODULE=off go get -u github.com/jesseduffield/lazygit
finished

start "Generating git/gitconfig zsh/zshenv zsh/env.d/tmux.env"
templates=("git/gitconfig" "zsh/zshenv" "zsh/env.d/tmux.env")
for tpl in ${templates[@]}; do
    envsubst '${DEFAULT_EMAIL} ${DOT} ${CREDENTIAL} ${TOOLS} ${SRC} ${TMUX_ENABLED} ${XDG_CONFIG_HOME} ${TPL_HEADER}' < "${DOT}/${tpl}.tpl" > "${DOT}/${tpl}"
done
finished

start "Concatting env files"
cat $DOT/zsh/env.d/*.env >> $DOT/zsh/zshenv
finished
cat $DOT/colors/falcon/exa/EXA_COLORS >> $DOT/zsh/zshenv

start "Concatting rc files"
rc_files=(
    "${DOT}/zsh/rc.d/completions.zsh"
    "${DOT}/zsh/rc.d/aliases.zsh"
    "${DOT}/zsh/rc.d/base.zsh"
    "${DOT}/zsh/rc.d/colored-man-pages.zsh"
    "${DOT}/zsh/rc.d/git.zsh"
    "${DOT}/zsh/rc.d/history.zsh"
    "${DOT}/zsh/rc.d/mc.zsh"
    "${DOT}/zsh/rc.d/tmux.zsh"
    "${DOT}/zsh/rc.d/zle.zsh"
    "${DOT}/zsh/rc.d/tmux-vim-integration.plugin.zsh"
    "${DOT}/zsh/rc.d/zsh-autosuggestions.zsh"
    "${DOT}/zsh/rc.d/zsh-syntax-highlighting.zsh"
    "${DOT}/zsh/theme/functions.zsh"
    "${DOT}/zsh/theme/michaelorr-theme.zsh"
)
echo "####
# This file is compiled via $DOT/bootstrap
# Do not directly modify it
####" > ${DOT}/zsh/zshrc
for f in ${rc_files[@]}; do
    echo "### ${f}" >> ${DOT}/zsh/zshrc
    cat ${f} >> ${DOT}/zsh/zshrc
done
finished

start "Linking git/gitconfig zsh/zshenv zsh/zshrc vim/vimrc vim/vim etc/hushlogin"
source_configs=("git/gitconfig" "zsh/zshenv" "zsh/zshrc" "vim/vimrc" "vim/vim" "etc/hushlogin")
for f in ${source_configs[@]}; do
    ln $ln_args "${DOT}/${f}" ~/.$(basename $f)
done
finished

start "Installing/Updating vim plugins"
vim +"PlugInstall | GoInstallBinaries" +qall
finished

if [[ ! -d ${TOOLS}/google-cloud-sdk ]]; then
    start "Installing gcloud/kubectl"
    tmp_dir=$(mktemp -d -t gcloud-XXXXX)
    curl https://sdk.cloud.google.com > $tmp_dir/install_gcloud.sh
    bash $tmp_dir/install_gcloud.sh --disable-prompts --install-dir=${TOOLS}
    rm -rf "$tmp_dir"
    ${TOOLS}/google-cloud-sdk/bin/gcloud components install kubectl --quiet
    finished
fi

if [[ -f $TOOLS/google-cloud-sdk/path.zsh.inc ]]; then
    echo "### $TOOLS/google-cloud-sdk/path.zsh.inc
source $TOOLS/google-cloud-sdk/path.zsh.inc" >> $DOT/zsh/zshrc
fi

if [ -f $TOOLS/google-cloud-sdk/completion.zsh.inc ]; then
    echo "### $TOOLS/google-cloud-sdk/completion.zsh.inc" >> $DOT/zsh/zshrc
    cat "$TOOLS/google-cloud-sdk/completion.zsh.inc" >> $DOT/zsh/zshrc
fi
