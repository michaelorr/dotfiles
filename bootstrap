#!/usr/bin/env bash

set -euo pipefail

###
# Modify the following variables to customize the installation
###
export OS=darwin  # `darwin`
export DOT=/usr/local/dot
zshrc=${DOT}/zsh/zshrc
export SRC=/usr/local/src
export TOOLS=/usr/local/etc
export DEFAULT_EMAIL="michael@orr.co"
export TMUX_ENABLED=true
export GOPATH=$SRC/go
export GO_INSTALL_PATH=/usr/local
export ARCH=arm64

add_bat_php=false
install_google_cloud_sdk=false
install_tparse=false
install_brew_packages=false
###

# source ./local_overlay

export PATH+=":${GO_INSTALL_PATH}/go/bin"
export TPL_HEADER="###
# The following file was autogenerated from a template. Do not modify it directly.
###"

function start {
    echo ">>> $1"
}

function finished {
    echo "::: Done"
}

if [[ -d $DOT/colors/falcon ]]; then
    start "Updating falcon colors"
    git -C $DOT/colors/falcon pull
    finished
else
    start "Installing falcon colors"
    git clone https://github.com/fenetikm/falcon $DOT/colors/falcon
    finished
fi

if [[ -d $DOT/git/gitstatus ]]; then
    start "Updating gitstatus"
    git -C $DOT/git/gitstatus pull
    finished
else
    start "Installing gitstatus"
    git clone https://github.com/romkatv/gitstatus $DOT/git/gitstatus
    finished
fi

if [[ -d $DOT/zsh/zsh-vi-mode ]]; then
    start "Updating zsh-vi-mode"
    git -C $DOT/zsh/zsh-vi-mode stash
    git -C $DOT/zsh/zsh-vi-mode pull
    git -C $DOT/zsh/zsh-vi-mode stash pop || true
    finished
else
    start "Installing zsh-vi-mode"
    git clone https://github.com/jeffreytse/zsh-vi-mode $DOT/zsh/zsh-vi-mode
    finished
fi

if [[ $OS == "darwin" ]]; then
    brew update || true
    brew upgrade

    if [[ $install_brew_packages == "true" ]]; then
        brew tap microsoft/git
        brew install vim tmux jq fzf exa git-delta bat wget the_silver_searcher jesseduffield/lazygit/lazygit jesseduffield/lazydocker/lazydocker zsh-syntax-highlighting zsh-autosuggestions git zsh-completions git-credential-manager-core docker htop coreutils kitty fd
    fi

    ln_args="-hfs"

    export XDG_CONFIG_HOME=$HOME/.config
    export CREDENTIAL="[credential]
    # helper = osxkeychain
    helper = /usr/local/share/gcm-core/git-credential-manager"
    goos="darwin"
    group_name="admin"

    if [[ $add_bat_php == "true" ]]; then
        # add `bat` support for php
        # bat is used by git-delta
        mkdir -p ~/.config/bat/syntaxes
        ln $ln_args "${DOT}/git/PHP.sublime-syntax" "${XDG_CONFIG_HOME}/bat/syntaxes/PHP.sublime-syntax"
        cd && bat cache --build && cd --
    fi

    export GIT_PAGER="pager = delta"
    export GIT_DELTA="[delta]
    line-numbers = true
    true-color = always
    # side-by-side = true
    hyperlinks = true
    navigate = true
[interactive]
    diffFilter = delta --color-only
[pager]
    diff = delta
    show = delta
    log = delta
    blame = delta
    reflog = delta"
fi

if [[ ! -d ${GO_INSTALL_PATH}/go ]]; then
    version=$(curl "https://go.dev/VERSION?m=text")
    start "Installing golang version: ${version}"
    # install go if not found on path
    tmp_dir=$(mktemp -d -t golang-XXXXX)
    wget "https://go.dev/dl/${version}.${goos}-${ARCH}.tar.gz" -P "$tmp_dir"
    sudo mkdir "${GO_INSTALL_PATH}/go"
    sudo chown "$USER":"${group_name}" "${GO_INSTALL_PATH}/go"
    tar -xzf "${tmp_dir}"/go1.*.tar.gz -C "${GO_INSTALL_PATH}"
    rm -rf "$tmp_dir"
    finished
fi


if [[ $install_tparse == "true" ]]; then
    start "Installing go utilities"
    go install github.com/mfridman/tparse@latest
    finished
fi

start "Generating git/gitconfig zsh/zshenv zsh/env.d/tmux.env"
templates=("git/gitconfig" "zsh/zshenv" "zsh/env.d/tmux.env")
for tpl in ${templates[@]}; do
    envsubst '${DEFAULT_EMAIL} ${DOT} ${GIT_PAGER} ${GIT_DELTA} ${CREDENTIAL} ${TOOLS} ${SRC} ${TMUX_ENABLED} ${XDG_CONFIG_HOME} ${TPL_HEADER}' < "${DOT}/${tpl}.tpl" > "${DOT}/${tpl}"
done
finished

start "Concatting env files"
cat $DOT/zsh/env.d/*.env >> $DOT/zsh/zshenv
finished
cat $DOT/colors/falcon/exa/EXA_COLORS >> $DOT/zsh/zshenv

start "Concatting rc files"
rc_files=(
    "${DOT}/zsh/rc.d/homebrew-path.zsh"
    "${DOT}/zsh/rc.d/completions.zsh"
    "${DOT}/zsh/rc.d/aliases.zsh"
    "${DOT}/zsh/rc.d/base.zsh"
    "${DOT}/zsh/rc.d/colored-man-pages.zsh"
    "${DOT}/zsh/rc.d/history.zsh"
    "${DOT}/zsh/rc.d/funcs.zsh"
    "${DOT}/zsh/rc.d/tmux.zsh"
    "${DOT}/zsh/rc.d/zle.zsh"
    "${DOT}/zsh/rc.d/tmux-vim-integration.plugin.zsh"
    "${DOT}/zsh/rc.d/zsh-autosuggestions.zsh"
    "${DOT}/zsh/rc.d/zsh-syntax-highlighting.zsh"
    "${DOT}/zsh/theme/functions.zsh"
    "${DOT}/zsh/theme/michaelorr-theme.zsh"
    "${DOT}/zsh/rc.d/fzf.zsh"
    "${DOT}/zsh/rc.d/zsh-vi-mode.zsh"
    "${DOT}/zsh/rc.d/asdf.zsh"
)
echo "####
# This file is compiled via $DOT/bootstrap
# Do not directly modify it
####" > ${zshrc}
for f in ${rc_files[@]}; do
    echo "### ${f}" >> ${zshrc}
    cat ${f} >> ${zshrc}
    echo >> ${zshrc}
done
finished

start "Linking git/gitconfig zsh/zshenv zsh/zshrc vim/vimrc vim/vim etc/hushlogin etc/agignore"
source_configs=("git/gitconfig" "zsh/zshenv" "zsh/zshrc" "vim/vimrc" "vim/vim" "etc/hushlogin" "etc/agignore")
for f in ${source_configs[@]}; do
    ln $ln_args "${DOT}/${f}" ~/.$(basename $f)
done
finished

start "Linking kitty.conf"
mkdir -p ~/.config/kitty
ln $ln_args "${DOT}/etc/kitty.conf" ~/.config/kitty/kitty.conf
finished

start "Installing/Updating vim plugins"
vim +"PlugInstall | PlugUpdate | PlugUpgrade | PlugClean | GoInstallBinaries" +qall
finished

if [[ $install_google_cloud_sdk == "true" ]]; then
    if [[ ! -d ${TOOLS}/google-cloud-sdk ]]; then
        start "Installing gcloud/kubectl"
        tmp_dir=$(mktemp -d -t gcloud-XXXXX)
        curl https://sdk.cloud.google.com > $tmp_dir/install_gcloud.sh
        bash $tmp_dir/install_gcloud.sh --disable-prompts --install-dir=${TOOLS}
        rm -rf "$tmp_dir"
        ${TOOLS}/google-cloud-sdk/bin/gcloud components install kubectl --quiet
        finished
    fi

    if [[ -f $TOOLS/google-cloud-sdk/path.zsh.inc ]]; then
        echo "### $TOOLS/google-cloud-sdk/path.zsh.inc
        source $TOOLS/google-cloud-sdk/path.zsh.inc" >> $zshrc
    fi

    if [ -f $TOOLS/google-cloud-sdk/completion.zsh.inc ]; then
        echo "### $TOOLS/google-cloud-sdk/completion.zsh.inc" >> $zshrc
        cat "$TOOLS/google-cloud-sdk/completion.zsh.inc" >> $zshrc
    fi
fi
