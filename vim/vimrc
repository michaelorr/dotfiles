" Make backspace behave in a sane manner.
set backspace=indent,eol,start

let TMPDIR="/tmp"

" Switch syntax highlighting on
" `syntax enable`: preserve prior highlight settings
" `syntax on`: override prior highlight settings
syntax enable
set synmaxcol=500

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Show hybrid line numbers
set number relativenumber

" use osx + linux system clipboards
set clipboard=unnamed,unnamedplus

" set this higher for taller messages at bottom
set cmdheight=1

" don't look for autocompletions in included files (can be slow)
set complete-=i

" splits should open to the right and bottom (default is left and top)
set splitright
set splitbelow

" Automatically write file for any call to :make
" This is also used by vim-go when calling, for example :GoBuild
set autowrite

" add an 100 char bg highlight
set colorcolumn=100

" dont replace long last lines with '@'
set display+=lastline

" default file encoding
set encoding=utf-8
set fileencodings+=utf-8

" let arrow keys and other escape sequences work in insert mode
set esckeys

" Detect newline chars from more OSs
set fileformats+=mac

" Allow modified buffers to be backgrounded
set hidden
" Ask what to do when modified buffers are being closed
set confirm

let g:is_posix=1

" if a file is modified outside vim and NOT modified inside, reread the file
set autoread

if &history < 200
    set history=200
endif

set hlsearch incsearch
set ignorecase smartcase

" Use <C-L> to clear the highlights of :set hlsearch
" and <leader>l to clear highlighting and also reset syntax highlighting from the beginning of the file
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" always show statusline
set laststatus=2

" use the more prompt when long messages displayed
set more

" enable the mouse for all modes
set mouse=a

set cursorline
set nocursorcolumn

" dont wrap lines for display
set nowrap

" if vim tries to do math, it shouldnt do octal math
set nrformats-=octal

" width of the line numbers column
set numberwidth=4

" minimum number of lines/chars to show surrounding the cursor
set scrolloff=3
set sidescrolloff=5
set sidescroll=1

set langnoremap

" change from visual mode to selection mode when the mouse is used
set selectmode=mouse

" use short messages when possible
set shortmess=ast

" show partial cmd in last line of screen
set showcmd

" Don't need to display --INSERT-- when airline has it
set noshowmode

" assume a fast terminal connection and smooth the drawing of chars
set ttyfast

" Use a dynamic list of options for auto-complete
set wildmenu

" set options for <C-n> or <C-p> auto-completion
set completeopt=menuone,longest,preview

" set the characters that wrap at the end of a line
set whichwrap+=<,>,h,l,[,],s,b

" tell vim we are working with a dark bg
set background=dark

" tell vim that our terminal can handle 256 colors
" Also make sure that $TERM is one of xterm-256color or screen-256color
set t_Co=256
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

" Reset the "BCE" aka "Background Color Erase" behavior
let &t_ut=''

" eff those new lines
nnoremap <Leader>ftnl :%s/#012/\r/ge<CR>
nnoremap <Leader>ftnl2 :%s/\\n/\r/ge<CR>

" soft wrap lines at 100 chars
nnoremap <leader>wrap :execute "normal! mw"<bar>set linebreak<bar>set textwidth=100<bar>%!fold -sw 100<CR> :set nolinebreak<bar>execute "normal! `w"<CR>
nnoremap <leader>short :execute "normal! mw"<bar>set linebreak<bar>set textwidth=50<bar>%!fold -sw 50<CR> :set nolinebreak<bar>execute "normal! `w"<CR>

:command Wrap set wrap! linebreak
:command Nowrap set nowrap! nolinebreak
:command -count=100 -bar Short set textwidth=<count>|%!fold -sw <q-count>

" fix trailing whitespace
nnoremap <Leader>ws :%s/\s\+$//e<bar>execute "normal! ``"<CR>

" Turn ALE on/off
nnoremap <Leader>ale :ALEToggle<CR>

" Open the current file or selection in github
noremap <Leader>gh :OpenGithubFile<CR>
noremap <Leader>gh :OpenGithubFile<CR>

" Make n/N consistent regardless of search direction (/ vs ?)
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Turn `Q` into a no-op. Disables ex-mode
nnoremap Q <Nop>

if has('persistent_undo')
    set undodir=$HOME/.vim/undo
    set undolevels=200
    " save undo operations on file close
    set undofile
endif

" Don't bother saving buffers / registers on restart
set viminfo=

" aliases for typos
:command! -bang WQ wq<bang>
:command! -bang Wq wq<bang>
:command! -bang W w<bang>
:command! -bang Q quit<bang>
" See :help command-line-window ... its super annoying
nnoremap q: <nop>

set timeout timeoutlen=2000 ttimeout ttimeoutlen=10

set lazyredraw

" http://vim.wikia.com/wiki/Indenting_source_code
set autoindent nosmartindent shiftround
set softtabstop=4 tabstop=4 shiftwidth=4 expandtab smarttab

" set 2 space tabs for the following filetypes
autocmd FileType javascript,javascript.jsx,coffee,ruby,haml,eruby,yaml,sass,cucumber setlocal softtabstop=2 tabstop=2 shiftwidth=2

" Modify syntax highlighting for file extensions
autocmd BufNewFile,BufRead *.zsh-theme set ft=zsh
autocmd BufNewFile,BufRead {Gemfile,Guardfile,VagrantFile,*.pp} set ft=ruby
autocmd BufNewFile,BufRead *.pyx set ft=python
autocmd BufNewFile,BufRead {*.conf.mac,*.conf.linux} set ft=conf
autocmd BufNewFile,BufRead Dockerfile.tmpl set ft=dockerfile
autocmd BufNewFile,BufRead *tmux.conf* set ft=tmux
autocmd BufNewFile,BufRead *.php set filetype=php
autocmd BufNewFile,BufRead *.html set filetype=html.php
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx

" http://vi.stackexchange.com/questions/137/how-do-i-edit-crontab-files-with-vim-i-get-the-error-temp-file-must-be-edited
" crontab must be edited 'in place'
autocmd filetype crontab setlocal nobackup nowritebackup noswapfile

set nobackup nowritebackup

autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
autocmd BufRead /usr/local/src/wistia/wistia-setup/**.sh set noexpandtab

let g:gist_detect_filetype=1
let g:gist_post_private=1

let g:ale_linter_aliases = {'jsx': ['css', 'javascript']}
let g:ale_linters={'go': ['gofmt', 'golint', 'govet'], 'javascript': ['eslint'], 'jsx': ['stylelint', 'eslint'], 'ruby': ['rubocop']}
let g:ale_fixers={'javascript': ['eslint'], 'ruby': ['rubocop']}

let g:ale_fix_on_save=1
au FileType ruby let b:ale_fix_on_save=0
let g:ale_warn_about_trailing_whitespace=1
" let g:ale_html_tidy_options='-q -e -language en -config $HOME/.tidy.conf'
let g:ale_lint_on_text_changed='normal'
let g:ale_lint_on_insert_leave=1
let g:ale_set_highlights=0
let g:ale_cursor_detail=1
let g:ale_floating_preview=1
let g:ale_detail_to_floating_preview=1
let g:ale_close_preview_on_insert=1
let g:ale_floating_preview_popup_opts='g:AlePopupOpts'

func! s:aleHighlightGroup(loc) abort
    return 'ALEFloatingPreview' . get(a:loc, 'type', 'E')
endfunction

function! g:AlePopupOpts() abort
    let [l:info, l:loc] = ale#util#FindItemAtCursor(bufnr(''))

    return {
    \ 'title': ' ALE: ' . (l:loc.linter_name) . ' ',
    \ 'line': 2,
    \ 'col': winwidth(0),
    \ 'pos': 'topright',
    \ 'fixed': 0,
    \ 'padding': [0, 1, 0, 3],
    \ 'minwidth': 40,
    \ 'maxwidth': 80,
    \ 'wrap': 1,
    \ 'border': [1, 1, 1, 1],
    \ 'borderchars': ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
    \ 'moved': 'any',
    \ 'highlight': <SID>aleHighlightGroup(l:loc),
    \}
    endif
endfunction


let g:openbrowser_github_always_used_branch='master'
let g:openbrowser_github_url_exists_check='ignore'
let g:openbrowser_github_always_use_commit_hash=0

let g:fzf_buffers_jump = 1
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }
let g:fzf_preview_window = ['up:60%', 'ctrl-/']

set shell=$SHELL

let g:tagbar_use_cache = 0

call plug#begin()
  Plug 'mattn/vim-gist' | Plug 'mattn/webapi-vim'
  Plug 'ekalinin/Dockerfile.vim'
  Plug 'vim-airline/vim-airline'
  Plug 'fenetikm/falcon'
  Plug 'dense-analysis/ale'
  Plug 'martinda/Jenkinsfile-vim-syntax'
  Plug 'Konfekt/FastFold'
  Plug 'tpope/vim-rhubarb' | Plug 'tpope/vim-fugitive'
  Plug 'tyru/open-browser-github.vim' | Plug 'tyru/open-browser.vim'
  Plug 'lilydjwg/colorizer'
  Plug 'inside/vim-search-pulse'
  Plug 'scrooloose/nerdcommenter'
  Plug 'tpope/vim-surround'
  Plug 'Glench/Vim-Jinja2-Syntax'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'vim-scripts/CursorLineCurrentWindow'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/vim-peekaboo'
  Plug 'airblade/vim-rooter'
  Plug 'sheerun/vim-polyglot'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'machakann/vim-highlightedyank'
call plug#end()

let g:rooter_silent_chdir = 1
let g:rooter_resolve_links = 1
let g:rooter_patterns = ['!=falcon', '!=gitstatus', '!=zsh-vi-mode', '.git']

let g:highlightedyank_highlight_duration = 3000
let g:highlightedyank_max_lines = 500

" nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTrailingWhitespace = 1

" \cc           add comment to selected line(s)
" \cb           same as \cc but align both left and right sides
" \cy           yank, then same as \cc
" \c<space>     toggle comment (based on first line)
" \cs           comment "sexy"

" vim-go should use only quickfix instead of mixture of quickfix and locationlist
let g:go_list_type = "quickfix"
" vim-go increase test timeout to 30s, we are async so the delay is ok
let g:go_test_timeout = '30s'
" use `go imports` which updates import packages as well as doing normal `go fmt` stuff
let g:go_fmt_command = "goimports"

" vim-search-pulse
let g:vim_search_pulse_duration = 200
let g:vim_search_pulse_2ode = 'cursor_line'

" Disable some built-in plugins that we'll never need
let g:loaded_2html_plugin=1
let g:loaded_getscriptPlugin=1
let g:loaded_vimballPlugin=1

" see `:h formatoptions` or `:h fo-table` for more
" :verbose set fo?
"
" Don't automatically format long lines
setl formatoptions+=l
" Delete comment character when joining commented lines
setl formatoptions+=j
" Do not auto-wrap comments according to textwidth
setl formatoptions-=c
" Do not auto-insert comment leader after hitting 'o' or 'O'
setl formatoptions-=o
" Do auto-insert comment leader after hitting <Enter> in insert mode
setl formatoptions+=r
" Allow re-wrap via gq
setl formatoptions+=q

" Use fzf for quick file jumping
nnoremap <Leader><Space> :Files<CR>
" Use fzf for quick buffer jumping
nnoremap <Leader>b :Buffers<CR>
" Use fzf for quick git-status
nnoremap <Leader>gs :GFiles?<CR>
" Use fzf for quick searching
nnoremap <Leader>/ :Lines<CR>
" nnoremap <Leader>p PT Integration here

set belloff=all
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Access colors present in 256 colorspace
let base16colorspace=256

set termguicolors
let g:falcon2_airline=1
let g:airline_theme='falcon2'
let g:airline_powerline_fonts=0
let g:airline_symbols_ascii=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_sep_alt='|'
let g:airline_right_sep_alt='|'

let g:airline_section_y=''
let g:airline_skip_empty_sections=1
let g:airline#extensions#wordcount#enabled=0
let g:airline#extensions#tabline#enabled=0
let g:airline#extensions#tabline#show_tab_nr=1
let g:airline#extensions#tabline#buffer_idx_mode=1
let g:airline#extensions#tabline#show_tab_type = 0
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab
let g:airline#extensions#tabline#buffer_min_count=1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr'])
let g:airline_symbols.linenr = ''

let g:airline_mode_map = {'__':'───', 'n':'Nor', 'i':'Ins', 'R':'Rep', 'v':'Vis', 'V':'V-L', '':'V-B', 'c':'Cmd', 's':'Sel', 'S':'S-L', '':'S-B', 't':'Ter', }
let g:colorizer_maxlines = 2500
let g:falcon_background = 1
let g:falcon_inactive = 1
" These two lines should fix italics without the need to re-build the terminfo database
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
silent! colorscheme falcon

highlight SpellBad ctermfg=red cterm=underline
highlight ColorColumn guibg=#252527
highlight Folded guifg=#99a4bc cterm=italic
highlight InvalidWhitespace guibg=#9E1E00
highlight HighlightedyankRegion guibg=#36363A guifg=#FF761A
au InsertEnter * hi CursorLineNr guifg=#ff761a
au InsertLeave * hi CursorLineNr guifg=#b4b4b9
au InsertEnter * hi FoldColumn guifg=#ff761a
au InsertLeave * hi FoldColumn guifg=#787882
" execute 'highlight HighlightedyankRegion guibg=#36363A guifg=' . g:terminal_ansi_colors[5]

execute 'highlight ALEFloatingPreviewE guifg=#FF761A guibg=#2F2F3A'
execute 'highlight ALEFloatingPreviewW guifg=#FFc552 guibg=#2F2F3A'
execute 'highlight ALEFloatingPreviewI guifg=#34B4A4 guibg=#2F2F3A'

" ANSI Theme colors:
" g:terminal_ansi_colors[0]  #000004
" g:terminal_ansi_colors[1]  #FF3600
" g:terminal_ansi_colors[2]  #859933
" g:terminal_ansi_colors[3]  #FFC552
" g:terminal_ansi_colors[4]  #635196
" g:terminal_ansi_colors[5]  #FF761A
" g:terminal_ansi_colors[6]  #34B4A4
" g:terminal_ansi_colors[7]  #B4B4B9
" g:terminal_ansi_colors[8]  #020221
" g:terminal_ansi_colors[9]  #FF8E78
" g:terminal_ansi_colors[10] #B2BC55
" g:terminal_ansi_colors[11] #FFD392
" g:terminal_ansi_colors[12] #99A4BC
" g:terminal_ansi_colors[13] #FFB07B
" g:terminal_ansi_colors[14] #8BCCBF
" g:terminal_ansi_colors[15] #F8F8FF


" Full theme pallete
" '#000004'
" '#020221'
" '#031630'
" '#151521'
" '#171729'
" '#18182A'
" '#1E1E2F'
" '#203003'
" '#212127'
" '#28282D'
" '#2D1078'
" '#2F2F3A'
" '#300E03'
" '#34B4A4'
" '#36363A'
" '#3F3A59'
" '#5521D9'
" '#57575E'
" '#635196'
" '#666D26'
" '#787882'
" '#847B73'
" '#859933'
" '#878791'
" '#8BCCBF'
" '#99A4BC'
" '#9E1E00'
" '#9F97CC'
" '#B2BC55'
" '#B4B4B9'
" '#BFDAFF'
" '#C8D0E3'
" '#CFC1B2'
" '#DDCFBF'
" '#DFDFE5'
" '#F0E1CE'
" '#F8F8FF'
" '#FF3600'
" '#FF5FFF'
" '#FF761A'
" '#FF8E78'
" '#FFB07B'
" '#FFC552'
" '#FFD392'
" '#FFE8C0'


nnoremap <S-Up> <C-w>k
nnoremap <S-Down> <C-w>j
nnoremap <S-Left> <C-w>h
nnoremap <S-Right> <C-w>l

vnoremap <S-Up> k
vnoremap <S-Down> j

" Highlight any tab char anywhere in any line.
" Except in go files, where we want to hightlight any leading whitespace that
" contains a <space> literal before any non-whitespace char
2match InvalidWhitespace /\t/
autocmd FileType go 2match InvalidWhitespace /^\s* \+/
autocmd FileType gitcommit call clearmatches()

" Highlight trailing whitespace in any filetype
match InvalidWhitespace /\s\+$/
autocmd BufWinEnter * match InvalidWhitespace /\s\+$/
autocmd InsertEnter * match InvalidWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match InvalidWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

set foldmethod=indent
set foldnestmax=10
set foldlevel=3
set foldminlines=2
set foldcolumn=4
set foldopen+=jump

" go to buffer
nnoremap gb :ls<CR>:b

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

" Better diff algorithm
if has('mac') && $VIM == '/usr/share/vim'
  set diffopt-=internal
elseif has('patch-8.1.0360')
  set diffopt+=algorithm:patience
endif
set diffopt+=iwhite

hi Todo guifg=#9E1E00 guibg=#212127 gui=Italic

let &t_SI.="\e[6 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[2 q" "EI = NORMAL mode (ELSE)
" Cursor settings:
" 1 -> blinking block
" 2 -> solid block
" 3 -> blinking underscore
" 4 -> solid underscore
" 5 -> blinking vertical bar
" 6 -> solid vertical bar

" vim:set ft=vim et sw=2:
