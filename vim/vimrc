" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Switch syntax highlighting on
" `syntax enable`: preserve prior highlight settings
" `syntax on`: override prior highlight settings
syntax enable
set synmaxcol=500

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Show hybrid line numbers
set number relativenumber

" use osx + linux system clipboards
set clipboard=unnamed,unnamedplus

" set this higher for taller messages at bottom
set cmdheight=1

" don't look for autocompletions in included files (can be slow)
set complete-=i

" splits should open to the right and bottom (default is left and top)
set splitright
set splitbelow

" Automatically write file for any call to :make
" This is also used by vim-go when calling, for example :GoBuild
set autowrite

" add an 100 char bg highlight
set colorcolumn=100
autocmd FileType php setl colorcolumn=120

" dont replace long last lines with '@'
set display+=lastline

" default file encoding
set encoding=utf-8
set fileencodings+=utf-8

" let arrow keys and other escape sequences work in insert mode
set esckeys

" Detect newline chars from more OSs
set fileformats+=mac

" Allow modified buffers to be backgrounded
set hidden
" Ask what to do when modified buffers are being closed
set confirm

let g:is_posix=1

" if a file is modified outside vim and NOT modified inside, reread the file
set autoread

if &history < 200
    set history=200
endif

set hlsearch incsearch
set ignorecase smartcase

" Use <C-L> to clear the highlights of :set hlsearch
" and <leader>l to clear highlighting and also reset syntax highlighting from the beginning of the file
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" always show statusline
set laststatus=2

" use the more prompt when long messages displayed
set more

" enable the mouse for all modes
set mouse=a

set cursorline
set nocursorcolumn

" dont wrap lines for display
set nowrap

" if vim tries to do math, it shouldnt do octal math
set nrformats-=octal

" width of the line numbers column
set numberwidth=4

" Auto update pwd when changing files
set autochdir
" Set current dir to path, this let's us use `:find ...` to open files
set path=$PWD/**

" minimum number of lines/chars to show surrounding the cursor
set scrolloff=3
set sidescrolloff=5
set sidescroll=1

set langnoremap

" change from visual mode to selection mode when the mouse is used
set selectmode=mouse

" use short messages when possible
set shortmess=ast

" show partial cmd in last line of screen
set showcmd

" Don't need to display --INSERT-- when airline has it
set noshowmode

" assume a fast terminal connection and smooth the drawing of chars
set ttyfast

" Use a dynamic list of options for auto-complete
set wildmenu

" set options for <C-n> or <C-p> auto-completion
set completeopt=menuone,longest,preview

" set the characters that wrap at the end of a line
set whichwrap+=<,>,h,l,[,],s,b

" tell vim we are working with a dark bg
set background=dark

" tell vim that our terminal can handle 256 colors
" Also make sure that $TERM is one of xterm-256color or screen-256color
set t_Co=256
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

" Reset the "BCE" aka "Background Color Erase" behavior
set t_ut=

" eff those new lines
nnoremap <leader>ftnl :%s/#012/\r/ge<CR>

" soft wrap lines at 100 chars
nnoremap <leader>wrap :execute "normal! mw"<bar>set linebreak<bar>set textwidth=100<bar>%!fold -sw 100<CR> :set nolinebreak<bar>execute "normal! `w"<CR>

" fix trailing whitespace
nnoremap <Leader>ws :%s/\s\+$//e<bar>execute "normal! ``"<CR>

" Turn ALE on/off
nnoremap <Leader>ale :ALEToggle<CR>

" Open the current file or selection in github
nnoremap <Leader>gh :OpenGithubFile<CR>
vnoremap <Leader>gh :'<,'>OpenGithubFile<CR>

" Make n/N consistent regardless of search direction (/ vs ?)
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Turn `Q` into a no-op. Disables ex-mode
nnoremap Q <Nop>

if has('persistent_undo')
    set undodir=$HOME/.vim/undo
    set undolevels=200
    " save undo operations on file close
    set undofile
endif

" Don't bother saving buffers / registers on restart
set viminfo=

" aliases for typos
:command! -bang WQ wq<bang>
:command! -bang Wq wq<bang>
:command! -bang W w<bang>
:command! -bang Q quit<bang>
" See :help command-line-window ... its super annoying
nnoremap q: <nop>

set timeout timeoutlen=2000 ttimeout ttimeoutlen=10

set lazyredraw

" http://vim.wikia.com/wiki/Indenting_source_code
set autoindent nosmartindent shiftround
set softtabstop=4 tabstop=4 shiftwidth=4 expandtab smarttab

" set 2 space tabs for the following filetypes
autocmd FileType coffee,ruby,haml,eruby,yaml,sass,cucumber set ai sw=2 sts=2 et

" Modify syntax highlighting for file extensions
autocmd BufNewFile,BufRead *.zsh-theme set ft=zsh
autocmd BufNewFile,BufRead {Gemfile,Guardfile,VagrantFile,*.pp} set ft=ruby
autocmd BufNewFile,BufRead *.pyx set ft=python
autocmd BufNewFile,BufRead {*.conf.mac,*.conf.linux} set ft=conf
autocmd BufNewFile,BufRead Dockerfile.tmpl set ft=dockerfile
autocmd BufNewFile,BufRead *tmux.conf* set ft=tmux
autocmd BufNewFile,BufRead *.php set filetype=php.html
autocmd BufNewFile,BufRead *.html set filetype=html.php

" http://vi.stackexchange.com/questions/137/how-do-i-edit-crontab-files-with-vim-i-get-the-error-temp-file-must-be-edited
" crontab must be edited 'in place'
autocmd filetype crontab setlocal nobackup nowritebackup noswapfile

set nobackup nowritebackup

autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4

let g:gist_api_url='https://git.rsglab.com/api/v3'
let g:gist_detect_filetype=1
let g:gist_post_private=1

let g:ale_linters={'go': []}
let g:ale_php_phpcs_standard='/Users/morr/src/mailchimp/vendor/rsg/mc-codesniffer-ruleset/MCStandard --exclude=Generic.Files.LineLength,Squiz.WhiteSpace.SuperfluousWhitespace -d memory_limit=-1'
" let g:ale_warn_about_trailing_whitespace=0
let g:ale_html_tidy_options='-q -e -language en -config $HOME/.tidy.conf'
let g:ale_lint_on_text_changed='normal'
let g:ale_lint_on_insert_leave=1
let g:ale_set_highlights=0

let g:github_enterprise_urls = ['git@git.rsglab.com']
let g:openbrowser_github_always_used_branch='master'
let g:openbrowser_github_url_exists_check='ignore'
let g:openbrowser_github_always_use_commit_hash=0

set shell=/usr/local/bin/zsh

call plug#begin()
Plug 'mattn/gist-vim' | Plug 'mattn/webapi-vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'vim-airline/vim-airline'
Plug 'fenetikm/falcon'
Plug 'w0rp/ale'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'Konfekt/FastFold'
Plug 'tpope/vim-rhubarb' | Plug 'tpope/vim-fugitive'
Plug 'tyru/open-browser-github.vim' | Plug 'tyru/open-browser.vim'
Plug 'majutsushi/tagbar'
Plug 'lilydjwg/colorizer'
Plug 'inside/vim-search-pulse'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'saltstack/salt-vim'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'vim-scripts/CursorLineCurrentWindow'
call plug#end()

" nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTrailingWhitespace = 1

" vim-go should use only quickfix instead of mixture of quickfix and locationlist
let g:go_list_type = "quickfix"
" vim-go increase test timeout to 30s, we are async so the delay is ok
let g:go_test_timeout = '30s'
" use `go imports` which updates import packages as well as doing normal `go fmt` stuff
let g:go_fmt_command = "goimports"

" vim-search-pulse
let g:vim_search_pulse_duration = 50

" Disable some built-in plugins that we'll never need
let g:loaded_2html_plugin=1
let g:loaded_getscriptPlugin=1
let g:loaded_vimballPlugin=1

" see `:h formatoptions` or `:h fo-table` for more
" :verbose set fo?
"
" Don't automatically format long lines
autocmd FileType * setl formatoptions+=l
" Delete comment character when joining commented lines
autocmd FileType * setl formatoptions+=j
" Do not auto-wrap comments according to textwidth
autocmd FileType * setl formatoptions-=c
" Do not auto-insert comment leader after hitting 'o' or 'O'
autocmd FileType * setl formatoptions-=o
" Do auto-insert comment leader after hitting <Enter> in insert mode
autocmd FileType * setl formatoptions+=r
" Allow re-wrap via gq
autocmd FileType * setl formatoptions+=q

" Don't show netrw banner
let g:netrw_banner=1
" Use simple listing of files (Tree mode currently has issues following symlinks)
let g:netrw_liststyle=4
nnoremap <Leader><Space> :Vexplore<CR>

set belloff=all
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Access colors present in 256 colorspace
let base16colorspace=256

colorscheme falcon
set termguicolors
let g:falcon_airline=1
let g:airline_theme='falcon'
let g:airline_powerline_fonts=1
let g:airline_section_y=''
let g:airline_skip_empty_sections=1
let g:airline#extensions#wordcount#enabled=0
let g:airline_mode_map = {'__':'───', 'n':'Nor', 'i':'Ins', 'R':'Rep', 'v':'Vis', 'V':'V-L', '':'V-B', 'c':'Cmd', 's':'Sel', 'S':'S-L', '':'S-B', 't':'Ter', }
let g:colorizer_maxlines = 2000

highlight SpellBad ctermfg=red cterm=underline
highlight CursorLineNr guifg=#ff761a
highlight ColorColumn guibg=#252527
highlight Folded guifg=#99a4bc cterm=italic
highlight FoldColumn guifg=#99a4bc
highlight InvalidWhitespace guibg=darkred

nnoremap <S-Up> <C-w>k
nnoremap <S-Down> <C-w>j
nnoremap <S-Left> <C-w>h
nnoremap <S-Right> <C-w>l

vnoremap <S-Up> k
vnoremap <S-Down> j

" Highlight any tab char anywhere in any line.
" Except in go files, where we want to hightlight any leading whitespace that
" contains a <space> literal before any non-whitespace char
2match InvalidWhitespace /\t/
autocmd FileType go 2match InvalidWhitespace /^\s* \+/
autocmd FileType gitcommit call clearmatches()

" Highlight trailing whitespace in any filetype
match InvalidWhitespace /\s\+$/
autocmd BufWinEnter * match InvalidWhitespace /\s\+$/
autocmd InsertEnter * match InvalidWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match InvalidWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

set foldmethod=indent
set foldnestmax=2
set foldlevel=2
set foldminlines=2
set foldcolumn=3

noremap <leader>rt :! script/run-tests %<CR>
fun! RunCurrentTest()
  let lnum = line(".")
  let col = col(".")

  let line = getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  let matches = matchlist(line, '\vfunction (.+)\(')
  let current_test = matches[1]

  execute "! ~/src/mailchimp/script/run-tests " . bufname("%") . ":" . current_test

  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun

noremap <leader>rct :call RunCurrentTest()<CR>

nnoremap gb :ls<CR>:b

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

" vim:set ft=vim et sw=2:
